// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241106003133_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Content.CourseContent.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("Cost");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("Опис ще не написаний")
                        .HasColumnName("Description");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Icon_path");

                    b.Property<bool>("InDevelopment")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasColumnName("Language");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Course", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Image.MyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Image_path");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("MyImage", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.CourseModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseId");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_available");

                    b.Property<string>("PathToMap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Path_to_map");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Course_Module", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseModuleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_available");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("CourseModuleId");

                    b.ToTable("Lesson", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.LessonQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AudioQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int?>("SimpleQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TextQuestionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AudioQuestionId");

                    b.HasIndex("ImageQuestionId");

                    b.HasIndex("LessonId");

                    b.HasIndex("SimpleQuestionId");

                    b.HasIndex("TextQuestionId");

                    b.ToTable("Lesson_question", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.Theory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image_path");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text_content");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.Property<string>("_serializedListContent")
                        .HasColumnType("text")
                        .HasColumnName("ListContent");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Theory", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.Answer.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AudioQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Option");

                    b.Property<int?>("SimpleQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TextQuestionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TimeStamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AudioQuestionId");

                    b.HasIndex("ImageQuestionId");

                    b.HasIndex("SimpleQuestionId");

                    b.HasIndex("TextQuestionId");

                    b.ToTable("AnswerOption", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.Answer.RightAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("AudioQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SimpleQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TextQuestionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("TimeStamp")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AudioQuestionId");

                    b.HasIndex("ImageQuestionId");

                    b.HasIndex("SimpleQuestionId");

                    b.HasIndex("TextQuestionId");

                    b.ToTable("RightAnswers", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.AudioQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AType")
                        .HasColumnType("int")
                        .HasColumnName("AnswerType");

                    b.Property<string>("AudioPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Audio_path");

                    b.Property<int>("QType")
                        .HasColumnType("int")
                        .HasColumnName("QuestionType");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("QuestionText");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Audio_Question", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.ImageQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AType")
                        .HasColumnType("int")
                        .HasColumnName("AnswerType");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image_path");

                    b.Property<int>("QType")
                        .HasColumnType("int")
                        .HasColumnName("QuestionType");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("QuestionText");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Image_Question", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.SimpleQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AType")
                        .HasColumnType("int")
                        .HasColumnName("AnswerType");

                    b.Property<int>("QType")
                        .HasColumnType("int")
                        .HasColumnName("QuestionType");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("QuestionText");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Simple_Question", "dbo");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.TextQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AType")
                        .HasColumnType("int")
                        .HasColumnName("AnswerType");

                    b.Property<int>("QType")
                        .HasColumnType("int")
                        .HasColumnName("QuestionType");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("QuestionText");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text_with_question");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Text_Question", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.CourseModule", b =>
                {
                    b.HasOne("Domain.Entity.Content.CourseContent.Course", "Course")
                        .WithMany("CourseModules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Course_CourseId_CourseModules");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.Lesson", b =>
                {
                    b.HasOne("Domain.Entity.Content.Lessons.CourseModule", "CourseModules")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseModules_.ModuleLessonsId_Lessons");

                    b.Navigation("CourseModules");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.LessonQuestion", b =>
                {
                    b.HasOne("Domain.Entity.Content.Question.AudioQuestion", "AudioQuestion")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("AudioQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LessonQuestions_AudioQuestionId_AudioQuestion");

                    b.HasOne("Domain.Entity.Content.Question.ImageQuestion", "ImageQuestion")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("ImageQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LessonQuestions_ImageQuestionId_ImageQuestion");

                    b.HasOne("Domain.Entity.Content.Lessons.Lesson", "Lesson")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_LessonQuestions_LessonId_Lesson");

                    b.HasOne("Domain.Entity.Content.Question.SimpleQuestion", "SimpleQuestion")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("SimpleQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LessonQuestions_SimpleQuestionId_SimpleQuestion");

                    b.HasOne("Domain.Entity.Content.Question.TextQuestion", "TextQuestion")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("TextQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_LessonQuestions_TextQuestionId_TextQuestion");

                    b.Navigation("AudioQuestion");

                    b.Navigation("ImageQuestion");

                    b.Navigation("Lesson");

                    b.Navigation("SimpleQuestion");

                    b.Navigation("TextQuestion");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.Theory", b =>
                {
                    b.HasOne("Domain.Entity.Content.Lessons.Lesson", "Lesson")
                        .WithMany("TheoryBlock")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_LessonId_LectureBlock");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.Answer.AnswerOption", b =>
                {
                    b.HasOne("Domain.Entity.Content.Question.AudioQuestion", "AudioQuestion")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("AudioQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Content.Question.ImageQuestion", "ImageQuestion")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("ImageQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Content.Question.SimpleQuestion", "SimpleQuestion")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("SimpleQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Content.Question.TextQuestion", "TextQuestion")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("TextQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AudioQuestion");

                    b.Navigation("ImageQuestion");

                    b.Navigation("SimpleQuestion");

                    b.Navigation("TextQuestion");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.Answer.RightAnswer", b =>
                {
                    b.HasOne("Domain.Entity.Content.Question.AudioQuestion", "AudioQuestion")
                        .WithMany("RightAnswers")
                        .HasForeignKey("AudioQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Content.Question.ImageQuestion", "ImageQuestion")
                        .WithMany("RightAnswers")
                        .HasForeignKey("ImageQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Content.Question.SimpleQuestion", "SimpleQuestion")
                        .WithMany("RightAnswers")
                        .HasForeignKey("SimpleQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Content.Question.TextQuestion", "TextQuestion")
                        .WithMany("RightAnswers")
                        .HasForeignKey("TextQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AudioQuestion");

                    b.Navigation("ImageQuestion");

                    b.Navigation("SimpleQuestion");

                    b.Navigation("TextQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Content.CourseContent.Course", b =>
                {
                    b.Navigation("CourseModules");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.CourseModule", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Domain.Entity.Content.Lessons.Lesson", b =>
                {
                    b.Navigation("LessonQuestions");

                    b.Navigation("TheoryBlock");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.AudioQuestion", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("LessonQuestions");

                    b.Navigation("RightAnswers");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.ImageQuestion", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("LessonQuestions");

                    b.Navigation("RightAnswers");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.SimpleQuestion", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("LessonQuestions");

                    b.Navigation("RightAnswers");
                });

            modelBuilder.Entity("Domain.Entity.Content.Question.TextQuestion", b =>
                {
                    b.Navigation("AnswerOptions");

                    b.Navigation("LessonQuestions");

                    b.Navigation("RightAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
